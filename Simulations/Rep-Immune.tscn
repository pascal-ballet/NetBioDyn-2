[gd_scene load_steps=16 format=2]

[sub_resource type="SpatialMaterial" id=2]
albedo_color = Color( 0, 1, 0.0392157, 1 )

[sub_resource type="SphereMesh" id=3]

[sub_resource type="SphereShape" id=4]

[sub_resource type="SpatialMaterial" id=5]
albedo_color = Color( 0.978975, 0.256011, 0.734578, 1 )

[sub_resource type="SphereMesh" id=6]

[sub_resource type="SphereShape" id=7]

[sub_resource type="SpatialMaterial" id=13]
albedo_color = Color( 0, 0.180392, 1, 1 )

[sub_resource type="SphereMesh" id=14]

[sub_resource type="SphereShape" id=15]

[sub_resource type="GDScript" id=8]
script/source = "
extends Node

# Reaction
func action(tree, R1) -> void:
	var proba:float = 0.1
	var alea:float = rand_range(0,100)
	#print_debug(str(\"alea=\", alea, \", proba=\", proba))
	if alea < proba:
		#print (str(\"proba ok:\",proba))
		if R1.is_queued_for_deletion() == false && (R1.get_meta(\"Name\") == \"Bact\" || R1.is_in_group(\"Bact\")   ): # R1 n'est pas déjà détruit et il appartient au bon groupe:
			#var R1:Spatial 		= collision[0]
			var nb_agents:int 	= R1.get_parent().get_child_count()
			#print (\"nb=\", nb_agents)
			#print(\"R1 is in gp : \", inputs[2])
			# Cas avec R2 == 0 ########################################################################################
			if \"0\" == \"0\": # Pas de 2nd réactif => toujours appliqué (à la proba précédente près)
				# si R1 CHANGE en P1 (il n'est ni enlevé, ni prolongé, il est donc remplacé par P1)
				if \"Bact\" != \"0\" && \"Bact\" != \"R1\" && \"Bact\" != \"R2\":
					#var P1 = null # et P1 peut être soit un nouvel agent soit du même type que R2 - Mais bon ici r2 = \"0\" donc ok pas de R2 qui compte
					#print_debug(\"spawn P1...\")
					NetBioDyn2gui.spawn_agent(tree,\"Bact\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
					R1.queue_free()
				# si R1 est ENLEVE (il est enlevé ou bien il MIME R2 mais qui vaut \"0\" aussi)
				if R1.is_queued_for_deletion() == false && \"Bact\" == \"0\" || \"Bact\" == \"R2\":
					R1.queue_free()
				# si P2 APPARAIT (je rappelle qu'ici R2 = 0)
				if \"Bact\" != \"0\" && \"Bact\" != \"R1\" && \"Bact\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # si R2 n'est ni enlevé, ni prolongé, il est donc remplacé par P2
					NetBioDyn2gui.spawn_agent(tree,\"Bact\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p2,\".tscn\")).instance()
				# si P2 MIME R1 il APPARAIT du meme type que R1
				if \"Bact\" == \"R1\" && nb_agents < tree.MAX_AGENTS: # si R2 n'est ni enlevé, ni prolongé, il est donc remplacé par P2
					var P2 = R1.duplicate(8) # load(str(\"res://SimBioCell/3-PreFabAgents/\",p2,\".tscn\")).instance()
					P2.global_translate(Vector3(R1.translation.x,R1.translation.y,R1.translation.z))
					R1.get_parent().add_child(P2)
				# si P3 APPARAIT
				if \"0\" != \"0\" && \"0\" != \"R1\" && \"0\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # P3 apparait
					NetBioDyn2gui.spawn_agent(tree,\"0\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) )
				return
			# Cas avec un 2nd réactif ########################################################################################
			var bodies = R1.get_colliding_bodies()
			if bodies.size() > 0:
				#print(str(\"collision size:\",bodies.size() ))
				#print(\"R1 is colliding\")
				var R2 = bodies[0]
				#print( str( \"List R1 : \", R1.get_meta_list()    ) )
				#print( str( \"List R2 : \", R2.get_meta_list()    ) )
				#print( str(\"R2.get_meta(Name) : \",  R2.get_meta(\"Name\")   ) )
				if R2 is RigidBody && R2.is_queued_for_deletion() == false && (R2.get_meta(\"Name\") == \"0\" || R2.is_in_group(\"0\")): # R2 n'est pas détruit et appartient au bon groupe
					#print( \"R2=>P2\" )
					# R1 CHANGE en p1
					if R1.is_queued_for_deletion() == false && \"Bact\" != \"0\" && \"Bact\" != \"R1\" && \"Bact\" != \"R2\": # si R1 n'est ni enlevé, ni prolongé, il est donc remplacé par P1
						NetBioDyn2gui.spawn_agent(tree,\"Bact\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
						R1.queue_free()
					# R1 est ENLEVE
					if R1.is_queued_for_deletion() == false && \"Bact\" == \"0\": # si R1 n'est pas prolongé, il est enlevé (càd soit enlevé soit remplacé)
						R1.queue_free()
					# R1/P1 MIME R2
					if R1.is_queued_for_deletion() == false && \"Bact\" == \"R2\": # si R1 devient P1 mais du meme type que R2
						var P1 = R2.duplicate(8) # load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
						P1.global_translate(Vector3(R1.translation.x,R1.translation.y,R1.translation.z))
						R1.get_parent().add_child(P1)
						R1.queue_free()
					# R2 CHANGE en p2
					if R2.is_queued_for_deletion() == false && \"Bact\" != \"0\" && \"Bact\" != \"R1\" && \"Bact\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # si R2 n'est ni enlevé, ni prolongé, il est donc remplacé par P2
						NetBioDyn2gui.spawn_agent(tree,\"Bact\", Vector3(R2.translation.x,R2.translation.y,R2.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p2,\".tscn\")).instance()
						R2.queue_free()
					# R2 est ENLEVE
					if R2.is_queued_for_deletion() == false && \"Bact\" == \"0\": # si R2 est enlevé tout simplement
						R2.queue_free()
					# R1/P1 MIME R2
					if R2.is_queued_for_deletion() == false && \"Bact\" == \"R1\": # si R2 devient P2 mais du meme type que R1
						var P2 = R1.duplicate(8) # load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
						P2.global_translate(Vector3(R2.translation.x,R2.translation.y,R2.translation.z))
						R1.get_parent().add_child(P2)
						R2.queue_free()
					# si P3 APPARAIT
					if \"0\" != \"0\" && \"0\" != \"R1\" && \"0\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # P3 apparait
						NetBioDyn2gui.spawn_agent(tree,\"0\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) )

					return

"

[sub_resource type="GDScript" id=9]
script/source = "
extends Node

# Reaction
func action(tree, R1) -> void:
	var proba:float = 10
	var alea:float = rand_range(0,100)
	#print_debug(str(\"alea=\", alea, \", proba=\", proba))
	if alea < proba:
		#print (str(\"proba ok:\",proba))
		if R1.is_queued_for_deletion() == false && (R1.get_meta(\"Name\") == \"SI\" || R1.is_in_group(\"SI\")   ): # R1 n'est pas déjà détruit et il appartient au bon groupe:
			#var R1:Spatial 		= collision[0]
			var nb_agents:int 	= R1.get_parent().get_child_count()
			#print (\"nb=\", nb_agents)
			#print(\"R1 is in gp : \", inputs[2])
			# Cas avec R2 == 0 ########################################################################################
			if \"Bact\" == \"0\": # Pas de 2nd réactif => toujours appliqué (à la proba précédente près)
				# si R1 CHANGE en P1 (il n'est ni enlevé, ni prolongé, il est donc remplacé par P1)
				if \"SI\" != \"0\" && \"SI\" != \"R1\" && \"SI\" != \"R2\":
					#var P1 = null # et P1 peut être soit un nouvel agent soit du même type que R2 - Mais bon ici r2 = \"0\" donc ok pas de R2 qui compte
					#print_debug(\"spawn P1...\")
					NetBioDyn2gui.spawn_agent(tree,\"SI\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
					R1.queue_free()
				# si R1 est ENLEVE (il est enlevé ou bien il MIME R2 mais qui vaut \"0\" aussi)
				if R1.is_queued_for_deletion() == false && \"SI\" == \"0\" || \"SI\" == \"R2\":
					R1.queue_free()
				# si P2 APPARAIT (je rappelle qu'ici R2 = 0)
				if \"SI\" != \"0\" && \"SI\" != \"R1\" && \"SI\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # si R2 n'est ni enlevé, ni prolongé, il est donc remplacé par P2
					NetBioDyn2gui.spawn_agent(tree,\"SI\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p2,\".tscn\")).instance()
				# si P2 MIME R1 il APPARAIT du meme type que R1
				if \"SI\" == \"R1\" && nb_agents < tree.MAX_AGENTS: # si R2 n'est ni enlevé, ni prolongé, il est donc remplacé par P2
					var P2 = R1.duplicate(8) # load(str(\"res://SimBioCell/3-PreFabAgents/\",p2,\".tscn\")).instance()
					P2.global_translate(Vector3(R1.translation.x,R1.translation.y,R1.translation.z))
					R1.get_parent().add_child(P2)
				# si P3 APPARAIT
				if \"0\" != \"0\" && \"0\" != \"R1\" && \"0\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # P3 apparait
					NetBioDyn2gui.spawn_agent(tree,\"0\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) )
				return
			# Cas avec un 2nd réactif ########################################################################################
			var bodies = R1.get_colliding_bodies()
			if bodies.size() > 0:
				#print(str(\"collision size:\",bodies.size() ))
				#print(\"R1 is colliding\")
				var R2 = bodies[0]
				#print( str( \"List R1 : \", R1.get_meta_list()    ) )
				#print( str( \"List R2 : \", R2.get_meta_list()    ) )
				#print( str(\"R2.get_meta(Name) : \",  R2.get_meta(\"Name\")   ) )
				if R2 is RigidBody && R2.is_queued_for_deletion() == false && (R2.get_meta(\"Name\") == \"Bact\" || R2.is_in_group(\"Bact\")): # R2 n'est pas détruit et appartient au bon groupe
					#print( \"R2=>P2\" )
					# R1 CHANGE en p1
					if R1.is_queued_for_deletion() == false && \"SI\" != \"0\" && \"SI\" != \"R1\" && \"SI\" != \"R2\": # si R1 n'est ni enlevé, ni prolongé, il est donc remplacé par P1
						NetBioDyn2gui.spawn_agent(tree,\"SI\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
						R1.queue_free()
					# R1 est ENLEVE
					if R1.is_queued_for_deletion() == false && \"SI\" == \"0\": # si R1 n'est pas prolongé, il est enlevé (càd soit enlevé soit remplacé)
						R1.queue_free()
					# R1/P1 MIME R2
					if R1.is_queued_for_deletion() == false && \"SI\" == \"R2\": # si R1 devient P1 mais du meme type que R2
						var P1 = R2.duplicate(8) # load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
						P1.global_translate(Vector3(R1.translation.x,R1.translation.y,R1.translation.z))
						R1.get_parent().add_child(P1)
						R1.queue_free()
					# R2 CHANGE en p2
					if R2.is_queued_for_deletion() == false && \"SI\" != \"0\" && \"SI\" != \"R1\" && \"SI\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # si R2 n'est ni enlevé, ni prolongé, il est donc remplacé par P2
						NetBioDyn2gui.spawn_agent(tree,\"SI\", Vector3(R2.translation.x,R2.translation.y,R2.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p2,\".tscn\")).instance()
						R2.queue_free()
					# R2 est ENLEVE
					if R2.is_queued_for_deletion() == false && \"SI\" == \"0\": # si R2 est enlevé tout simplement
						R2.queue_free()
					# R1/P1 MIME R2
					if R2.is_queued_for_deletion() == false && \"SI\" == \"R1\": # si R2 devient P2 mais du meme type que R1
						var P2 = R1.duplicate(8) # load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
						P2.global_translate(Vector3(R2.translation.x,R2.translation.y,R2.translation.z))
						R1.get_parent().add_child(P2)
						R2.queue_free()
					# si P3 APPARAIT
					if \"0\" != \"0\" && \"0\" != \"R1\" && \"0\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # P3 apparait
						NetBioDyn2gui.spawn_agent(tree,\"0\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) )

					return

"

[sub_resource type="GDScript" id=10]
script/source = "
extends Node
# Default Behavior
func action(tree, agent) -> void:
	if agent.get_meta(\"Name\") == \"SI\" || agent.is_in_group(\"SI\"):
		var alpha:float = randf() * 6.283185 - 6.283185 /2.0
		agent.apply_impulse(Vector3(0,0,0), Vector3(2.813647 * cos(alpha+0),0, 2.813647*sin(alpha+0)))
"

[sub_resource type="GDScript" id=11]
script/source = "
extends Node

# Reaction
func action(tree, R1) -> void:
	var proba:float = 0.3
	var alea:float = rand_range(0,100)
	#print_debug(str(\"alea=\", alea, \", proba=\", proba))
	if alea < proba:
		#print (str(\"proba ok:\",proba))
		if R1.is_queued_for_deletion() == false && (R1.get_meta(\"Name\") == \"SI\" || R1.is_in_group(\"SI\")   ): # R1 n'est pas déjà détruit et il appartient au bon groupe:
			#var R1:Spatial 		= collision[0]
			var nb_agents:int 	= R1.get_parent().get_child_count()
			#print (\"nb=\", nb_agents)
			#print(\"R1 is in gp : \", inputs[2])
			# Cas avec R2 == 0 ########################################################################################
			if \"0\" == \"0\": # Pas de 2nd réactif => toujours appliqué (à la proba précédente près)
				# si R1 CHANGE en P1 (il n'est ni enlevé, ni prolongé, il est donc remplacé par P1)
				if \"0\" != \"0\" && \"0\" != \"R1\" && \"0\" != \"R2\":
					#var P1 = null # et P1 peut être soit un nouvel agent soit du même type que R2 - Mais bon ici r2 = \"0\" donc ok pas de R2 qui compte
					#print_debug(\"spawn P1...\")
					NetBioDyn2gui.spawn_agent(tree,\"0\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
					R1.queue_free()
				# si R1 est ENLEVE (il est enlevé ou bien il MIME R2 mais qui vaut \"0\" aussi)
				if R1.is_queued_for_deletion() == false && \"0\" == \"0\" || \"0\" == \"R2\":
					R1.queue_free()
				# si P2 APPARAIT (je rappelle qu'ici R2 = 0)
				if \"0\" != \"0\" && \"0\" != \"R1\" && \"0\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # si R2 n'est ni enlevé, ni prolongé, il est donc remplacé par P2
					NetBioDyn2gui.spawn_agent(tree,\"0\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p2,\".tscn\")).instance()
				# si P2 MIME R1 il APPARAIT du meme type que R1
				if \"0\" == \"R1\" && nb_agents < tree.MAX_AGENTS: # si R2 n'est ni enlevé, ni prolongé, il est donc remplacé par P2
					var P2 = R1.duplicate(8) # load(str(\"res://SimBioCell/3-PreFabAgents/\",p2,\".tscn\")).instance()
					P2.global_translate(Vector3(R1.translation.x,R1.translation.y,R1.translation.z))
					R1.get_parent().add_child(P2)
				# si P3 APPARAIT
				if \"0\" != \"0\" && \"0\" != \"R1\" && \"0\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # P3 apparait
					NetBioDyn2gui.spawn_agent(tree,\"0\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) )
				return
			# Cas avec un 2nd réactif ########################################################################################
			var bodies = R1.get_colliding_bodies()
			if bodies.size() > 0:
				#print(str(\"collision size:\",bodies.size() ))
				#print(\"R1 is colliding\")
				var R2 = bodies[0]
				#print( str( \"List R1 : \", R1.get_meta_list()    ) )
				#print( str( \"List R2 : \", R2.get_meta_list()    ) )
				#print( str(\"R2.get_meta(Name) : \",  R2.get_meta(\"Name\")   ) )
				if R2 is RigidBody && R2.is_queued_for_deletion() == false && (R2.get_meta(\"Name\") == \"0\" || R2.is_in_group(\"0\")): # R2 n'est pas détruit et appartient au bon groupe
					#print( \"R2=>P2\" )
					# R1 CHANGE en p1
					if R1.is_queued_for_deletion() == false && \"0\" != \"0\" && \"0\" != \"R1\" && \"0\" != \"R2\": # si R1 n'est ni enlevé, ni prolongé, il est donc remplacé par P1
						NetBioDyn2gui.spawn_agent(tree,\"0\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
						R1.queue_free()
					# R1 est ENLEVE
					if R1.is_queued_for_deletion() == false && \"0\" == \"0\": # si R1 n'est pas prolongé, il est enlevé (càd soit enlevé soit remplacé)
						R1.queue_free()
					# R1/P1 MIME R2
					if R1.is_queued_for_deletion() == false && \"0\" == \"R2\": # si R1 devient P1 mais du meme type que R2
						var P1 = R2.duplicate(8) # load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
						P1.global_translate(Vector3(R1.translation.x,R1.translation.y,R1.translation.z))
						R1.get_parent().add_child(P1)
						R1.queue_free()
					# R2 CHANGE en p2
					if R2.is_queued_for_deletion() == false && \"0\" != \"0\" && \"0\" != \"R1\" && \"0\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # si R2 n'est ni enlevé, ni prolongé, il est donc remplacé par P2
						NetBioDyn2gui.spawn_agent(tree,\"0\", Vector3(R2.translation.x,R2.translation.y,R2.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p2,\".tscn\")).instance()
						R2.queue_free()
					# R2 est ENLEVE
					if R2.is_queued_for_deletion() == false && \"0\" == \"0\": # si R2 est enlevé tout simplement
						R2.queue_free()
					# R1/P1 MIME R2
					if R2.is_queued_for_deletion() == false && \"0\" == \"R1\": # si R2 devient P2 mais du meme type que R1
						var P2 = R1.duplicate(8) # load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
						P2.global_translate(Vector3(R2.translation.x,R2.translation.y,R2.translation.z))
						R1.get_parent().add_child(P2)
						R2.queue_free()
					# si P3 APPARAIT
					if \"0\" != \"0\" && \"0\" != \"R1\" && \"0\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # P3 apparait
						NetBioDyn2gui.spawn_agent(tree,\"0\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) )

					return

"

[sub_resource type="GDScript" id=12]
script/source = "
extends Node
# Default Behavior
func action(tree, agent) -> void:
	if agent.get_meta(\"Name\") == \"Bact\" || agent.is_in_group(\"Bact\"):
		var alpha:float = randf() * 6.283185 - 6.283185 /2.0
		agent.apply_impulse(Vector3(0,0,0), Vector3(0.278566 * cos(alpha+0),0, 0.278566*sin(alpha+0)))
"

[sub_resource type="GDScript" id=16]
script/source = "
extends Node

# Reaction
func action(tree, R1) -> void:
	var proba:float = 0.5
	var alea:float = rand_range(0,100)
	#print_debug(str(\"alea=\", alea, \", proba=\", proba))
	if alea < proba:
		#print (str(\"proba ok:\",proba))
		if R1.is_queued_for_deletion() == false && (R1.get_meta(\"Name\") == \"MO\" || R1.is_in_group(\"MO\")   ): # R1 n'est pas déjà détruit et il appartient au bon groupe:
			#var R1:Spatial 		= collision[0]
			var nb_agents:int 	= R1.get_parent().get_child_count()
			#print (\"nb=\", nb_agents)
			#print(\"R1 is in gp : \", inputs[2])
			# Cas avec R2 == 0 ########################################################################################
			if \"0\" == \"0\": # Pas de 2nd réactif => toujours appliqué (à la proba précédente près)
				# si R1 CHANGE en P1 (il n'est ni enlevé, ni prolongé, il est donc remplacé par P1)
				if \"MO\" != \"0\" && \"MO\" != \"R1\" && \"MO\" != \"R2\":
					#var P1 = null # et P1 peut être soit un nouvel agent soit du même type que R2 - Mais bon ici r2 = \"0\" donc ok pas de R2 qui compte
					#print_debug(\"spawn P1...\")
					NetBioDyn2gui.spawn_agent(tree,\"MO\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
					R1.queue_free()
				# si R1 est ENLEVE (il est enlevé ou bien il MIME R2 mais qui vaut \"0\" aussi)
				if R1.is_queued_for_deletion() == false && \"MO\" == \"0\" || \"MO\" == \"R2\":
					R1.queue_free()
				# si P2 APPARAIT (je rappelle qu'ici R2 = 0)
				if \"SI\" != \"0\" && \"SI\" != \"R1\" && \"SI\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # si R2 n'est ni enlevé, ni prolongé, il est donc remplacé par P2
					NetBioDyn2gui.spawn_agent(tree,\"SI\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p2,\".tscn\")).instance()
				# si P2 MIME R1 il APPARAIT du meme type que R1
				if \"SI\" == \"R1\" && nb_agents < tree.MAX_AGENTS: # si R2 n'est ni enlevé, ni prolongé, il est donc remplacé par P2
					var P2 = R1.duplicate(8) # load(str(\"res://SimBioCell/3-PreFabAgents/\",p2,\".tscn\")).instance()
					P2.global_translate(Vector3(R1.translation.x,R1.translation.y,R1.translation.z))
					R1.get_parent().add_child(P2)
				# si P3 APPARAIT
				if \"0\" != \"0\" && \"0\" != \"R1\" && \"0\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # P3 apparait
					NetBioDyn2gui.spawn_agent(tree,\"0\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) )
				return
			# Cas avec un 2nd réactif ########################################################################################
			var bodies = R1.get_colliding_bodies()
			if bodies.size() > 0:
				#print(str(\"collision size:\",bodies.size() ))
				#print(\"R1 is colliding\")
				var R2 = bodies[0]
				#print( str( \"List R1 : \", R1.get_meta_list()    ) )
				#print( str( \"List R2 : \", R2.get_meta_list()    ) )
				#print( str(\"R2.get_meta(Name) : \",  R2.get_meta(\"Name\")   ) )
				if R2 is RigidBody && R2.is_queued_for_deletion() == false && (R2.get_meta(\"Name\") == \"0\" || R2.is_in_group(\"0\")): # R2 n'est pas détruit et appartient au bon groupe
					#print( \"R2=>P2\" )
					# R1 CHANGE en p1
					if R1.is_queued_for_deletion() == false && \"MO\" != \"0\" && \"MO\" != \"R1\" && \"MO\" != \"R2\": # si R1 n'est ni enlevé, ni prolongé, il est donc remplacé par P1
						NetBioDyn2gui.spawn_agent(tree,\"MO\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
						R1.queue_free()
					# R1 est ENLEVE
					if R1.is_queued_for_deletion() == false && \"MO\" == \"0\": # si R1 n'est pas prolongé, il est enlevé (càd soit enlevé soit remplacé)
						R1.queue_free()
					# R1/P1 MIME R2
					if R1.is_queued_for_deletion() == false && \"MO\" == \"R2\": # si R1 devient P1 mais du meme type que R2
						var P1 = R2.duplicate(8) # load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
						P1.global_translate(Vector3(R1.translation.x,R1.translation.y,R1.translation.z))
						R1.get_parent().add_child(P1)
						R1.queue_free()
					# R2 CHANGE en p2
					if R2.is_queued_for_deletion() == false && \"SI\" != \"0\" && \"SI\" != \"R1\" && \"SI\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # si R2 n'est ni enlevé, ni prolongé, il est donc remplacé par P2
						NetBioDyn2gui.spawn_agent(tree,\"SI\", Vector3(R2.translation.x,R2.translation.y,R2.translation.z) ) #load(str(\"res://SimBioCell/3-PreFabAgents/\",p2,\".tscn\")).instance()
						R2.queue_free()
					# R2 est ENLEVE
					if R2.is_queued_for_deletion() == false && \"SI\" == \"0\": # si R2 est enlevé tout simplement
						R2.queue_free()
					# R1/P1 MIME R2
					if R2.is_queued_for_deletion() == false && \"SI\" == \"R1\": # si R2 devient P2 mais du meme type que R1
						var P2 = R1.duplicate(8) # load(str(\"res://SimBioCell/3-PreFabAgents/\",p1,\".tscn\")).instance()
						P2.global_translate(Vector3(R2.translation.x,R2.translation.y,R2.translation.z))
						R1.get_parent().add_child(P2)
						R2.queue_free()
					# si P3 APPARAIT
					if \"0\" != \"0\" && \"0\" != \"R1\" && \"0\" != \"R2\" && nb_agents < tree.MAX_AGENTS: # P3 apparait
						NetBioDyn2gui.spawn_agent(tree,\"0\", Vector3(R1.translation.x,R1.translation.y,R1.translation.z) )

					return

"

[node name="Simulator" type="Spatial"]

[node name="Entities" type="Node" parent="."]

[node name="SI" type="RigidBody" parent="Entities"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -996.954, 0, 0 )
visible = false
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "SI"
}

[node name="130" type="MeshInstance" parent="Entities/SI"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 2 )
mesh = SubResource( 3 )

[node name="131" type="CollisionShape" parent="Entities/SI"]
shape = SubResource( 4 )

[node name="Bact" type="RigidBody" parent="Entities"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -1001.05, 0, 0 )
visible = false
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Entities/Bact"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Entities/Bact"]
shape = SubResource( 7 )

[node name="MO" type="RigidBody" parent="Entities"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -999, 0, 0 )
visible = false
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "MO"
}

[node name="11921" type="MeshInstance" parent="Entities/MO"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 13 )
mesh = SubResource( 14 )

[node name="11922" type="CollisionShape" parent="Entities/MO"]
shape = SubResource( 15 )

[node name="Behaviors" type="Node" parent="."]

[node name="192" type="Node" parent="Behaviors"]
script = SubResource( 8 )
__meta__ = {
"Name": "Div Bact",
"P1": "Bact",
"P2": "Bact",
"P3": "0",
"R1": "Bact",
"R2": "0",
"Type": "Reaction",
"p": "0.1"
}

[node name="193" type="Node" parent="Behaviors"]
script = SubResource( 9 )
__meta__ = {
"Name": "Rep Immune",
"P1": "SI",
"P2": "SI",
"P3": "0",
"R1": "SI",
"R2": "Bact",
"Type": "Reaction",
"p": "10"
}

[node name="1045" type="Node" parent="Behaviors"]
script = SubResource( 10 )
__meta__ = {
"Agents": "SI",
"Angle": "360",
"Dir": "0",
"Intensity": "4",
"Name": "Mvt SI",
"Type": "Random Force"
}

[node name="3439" type="Node" parent="Behaviors"]
script = SubResource( 11 )
__meta__ = {
"Name": "Mort SI",
"P1": "0",
"P2": "0",
"P3": "0",
"R1": "SI",
"R2": "0",
"Type": "Reaction",
"p": "0.3"
}

[node name="11483" type="Node" parent="Behaviors"]
script = SubResource( 12 )
__meta__ = {
"Agents": "Bact",
"Angle": "360",
"Dir": "0",
"Intensity": "1",
"Name": "Mvt Bact",
"Type": "Random Force"
}

[node name="11925" type="Node" parent="Behaviors"]
script = SubResource( 16 )
__meta__ = {
"Name": "Add SI",
"P1": "MO",
"P2": "SI",
"P3": "0",
"R1": "MO",
"R2": "0",
"Type": "Reaction",
"p": "0.5"
}

[node name="Groups" type="Node" parent="."]

[node name="Grids" type="Node" parent="."]

[node name="Environment" type="Node" parent="."]

[node name="SI" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -45.8634, 0, 26.087 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "SI"
}

[node name="130" type="MeshInstance" parent="Environment/SI"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 2 )
mesh = SubResource( 3 )

[node name="131" type="CollisionShape" parent="Environment/SI"]
shape = SubResource( 4 )

[node name="SI194" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -52.1242, 0, 13.4658 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "SI"
}

[node name="130" type="MeshInstance" parent="Environment/SI194"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 2 )
mesh = SubResource( 3 )

[node name="131" type="CollisionShape" parent="Environment/SI194"]
shape = SubResource( 4 )

[node name="SI195" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -46.2609, 0, -1.04347 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "SI"
}

[node name="130" type="MeshInstance" parent="Environment/SI195"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 2 )
mesh = SubResource( 3 )

[node name="131" type="CollisionShape" parent="Environment/SI195"]
shape = SubResource( 4 )

[node name="SI196" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -11.8758, 0, -19.2298 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "SI"
}

[node name="130" type="MeshInstance" parent="Environment/SI196"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 2 )
mesh = SubResource( 3 )

[node name="131" type="CollisionShape" parent="Environment/SI196"]
shape = SubResource( 4 )

[node name="SI197" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 14.559, 0, -7.60248 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "SI"
}

[node name="130" type="MeshInstance" parent="Environment/SI197"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 2 )
mesh = SubResource( 3 )

[node name="131" type="CollisionShape" parent="Environment/SI197"]
shape = SubResource( 4 )

[node name="SI198" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 44.0745, 0, 7.60249 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "SI"
}

[node name="130" type="MeshInstance" parent="Environment/SI198"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 2 )
mesh = SubResource( 3 )

[node name="131" type="CollisionShape" parent="Environment/SI198"]
shape = SubResource( 4 )

[node name="SI199" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 52.9193, 0, 18.6335 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "SI"
}

[node name="130" type="MeshInstance" parent="Environment/SI199"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 2 )
mesh = SubResource( 3 )

[node name="131" type="CollisionShape" parent="Environment/SI199"]
shape = SubResource( 4 )

[node name="SI200" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 53.2174, 0, -10.6832 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "SI"
}

[node name="130" type="MeshInstance" parent="Environment/SI200"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 2 )
mesh = SubResource( 3 )

[node name="131" type="CollisionShape" parent="Environment/SI200"]
shape = SubResource( 4 )

[node name="SI201" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 29.4658, 0, 1.93789 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "SI"
}

[node name="130" type="MeshInstance" parent="Environment/SI201"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 2 )
mesh = SubResource( 3 )

[node name="131" type="CollisionShape" parent="Environment/SI201"]
shape = SubResource( 4 )

[node name="SI202" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 9.29192, 0, 17.8385 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "SI"
}

[node name="130" type="MeshInstance" parent="Environment/SI202"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 2 )
mesh = SubResource( 3 )

[node name="131" type="CollisionShape" parent="Environment/SI202"]
shape = SubResource( 4 )

[node name="SI203" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -12.2733, 0, 1.441 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "SI"
}

[node name="130" type="MeshInstance" parent="Environment/SI203"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 2 )
mesh = SubResource( 3 )

[node name="131" type="CollisionShape" parent="Environment/SI203"]
shape = SubResource( 4 )

[node name="Bact" type="RigidBody" parent="Environment"]
transform = Transform( 0.96693, 0, 0.255041, 0, 1, 0, -0.255041, 0, 0.96693, 8.31644, 0, 2.53738 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact"]
shape = SubResource( 7 )

[node name="Bact204" type="RigidBody" parent="Environment"]
transform = Transform( 0.987741, 0, -0.156102, 0, 1, 0, 0.156102, 0, 0.987741, 8.98801, 0, 5.30165 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact204"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact204"]
shape = SubResource( 7 )

[node name="Bact205" type="RigidBody" parent="Environment"]
transform = Transform( 0.929491, 0, 0.368845, 0, 1, 0, -0.368845, 0, 0.929491, 9.18113, 0, 0.682159 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact205"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact205"]
shape = SubResource( 7 )

[node name="Bact206" type="RigidBody" parent="Environment"]
transform = Transform( 0.972899, 0, -0.231229, 0, 1, 0, 0.231229, 0, 0.972899, 10.0981, 0, 3.51907 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact206"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact206"]
shape = SubResource( 7 )

[node name="Bact207" type="RigidBody" parent="Environment"]
transform = Transform( 0.88758, 0, -0.460654, 0, 1, 0, 0.460654, 0, 0.88758, 11.322, 0, 5.14126 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact207"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact207"]
shape = SubResource( 7 )

[node name="Bact208" type="RigidBody" parent="Environment"]
transform = Transform( 0.245227, 0, -0.969466, 0, 1, 0, 0.969466, 0, 0.245227, 10.3698, 0, 6.92396 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact208"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact208"]
shape = SubResource( 7 )

[node name="Bact209" type="RigidBody" parent="Environment"]
transform = Transform( 0.928246, 0, -0.371966, 0, 1, 0, 0.371966, 0, 0.928246, 8.34633, 0, 7.22386 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact209"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact209"]
shape = SubResource( 7 )

[node name="Bact210" type="RigidBody" parent="Environment"]
transform = Transform( 0.934619, 0, 0.35565, 0, 1, 0, -0.35565, 0, 0.934619, 6.78194, 0, 9.79355 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact210"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact210"]
shape = SubResource( 7 )

[node name="Bact211" type="RigidBody" parent="Environment"]
transform = Transform( 0.959838, 0, -0.280554, 0, 1, 0, 0.280554, 0, 0.959838, 4.28182, 0, 7.87814 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact211"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact211"]
shape = SubResource( 7 )

[node name="Bact212" type="RigidBody" parent="Environment"]
transform = Transform( 0.980139, 0, 0.198313, 0, 1, 0, -0.198313, 0, 0.980139, 2.01754, 0, 5.02284 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact212"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact212"]
shape = SubResource( 7 )

[node name="Bact213" type="RigidBody" parent="Environment"]
transform = Transform( 0.978547, 0, 0.206022, 0, 1, 0, -0.206022, 0, 0.978547, 2.50708, 0, 3.05285 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact213"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact213"]
shape = SubResource( 7 )

[node name="Bact214" type="RigidBody" parent="Environment"]
transform = Transform( 0.63711, 0, -0.770773, 0, 1, 0, 0.770773, 0, 0.63711, 3.48672, 0, 0.174781 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact214"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact214"]
shape = SubResource( 7 )

[node name="Bact215" type="RigidBody" parent="Environment"]
transform = Transform( 0.99461, 0, 0.103691, 0, 1, 0, -0.103691, 0, 0.99461, 4.88688, 0, 4.02987 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact215"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact215"]
shape = SubResource( 7 )

[node name="Bact216" type="RigidBody" parent="Environment"]
transform = Transform( 0.931416, 0, 0.363956, 0, 1, 0, -0.363956, 0, 0.931416, 5.88898, 0, 5.80911 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact216"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact216"]
shape = SubResource( 7 )

[node name="Bact217" type="RigidBody" parent="Environment"]
transform = Transform( 0.963079, 0, -0.269219, 0, 1, 0, 0.269219, 0, 0.963079, 6.34839, 0, 7.79971 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact217"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact217"]
shape = SubResource( 7 )

[node name="Bact218" type="RigidBody" parent="Environment"]
transform = Transform( 0.999925, 0, 0.0122131, 0, 1, 0, -0.0122131, 0, 0.999925, 3.84799, 0, 5.90211 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact218"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact218"]
shape = SubResource( 7 )

[node name="Bact219" type="RigidBody" parent="Environment"]
transform = Transform( 0.941748, 0, 0.33632, 0, 1, 0, -0.33632, 0, 0.941748, 4.28503, 0, 2.04796 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact219"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact219"]
shape = SubResource( 7 )

[node name="Bact220" type="RigidBody" parent="Environment"]
transform = Transform( 0.999899, 0, 0.0142106, 0, 1, 0, -0.0142106, 0, 0.999899, 6.28393, 0, 2.47653 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact220"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact220"]
shape = SubResource( 7 )

[node name="Bact221" type="RigidBody" parent="Environment"]
transform = Transform( 0.99653, 0, -0.0832383, 0, 1, 0, 0.0832383, 0, 0.99653, 7.23388, 0, 4.27331 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact221"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact221"]
shape = SubResource( 7 )

[node name="Bact3131" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -60.9502, 0, -21.0186 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact3131"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact3131"]
shape = SubResource( 7 )

[node name="Bact3132" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -58.9207, 0, -21.0186 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact3132"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact3132"]
shape = SubResource( 7 )

[node name="Bact3133" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -56.8744, 0, -21.0186 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact3133"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact3133"]
shape = SubResource( 7 )

[node name="Bact3134" type="RigidBody" parent="Environment"]
transform = Transform( 0.997819, 0, -0.066009, 0, 1, 0, 0.066009, 0, 0.997819, 75.9444, 0, -28.6827 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact3134"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact3134"]
shape = SubResource( 7 )

[node name="Bact3135" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, -0.000817622, 0, 1, 0, 0.000817622, 0, 1, 74.0477, 0, -29.4435 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact3135"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact3135"]
shape = SubResource( 7 )

[node name="Bact3136" type="RigidBody" parent="Environment"]
transform = Transform( 0.997873, 0, 0.0651833, 0, 1, 0, -0.0651833, 0, 0.997873, 72.0699, 0, -29.9731 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact3136"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact3136"]
shape = SubResource( 7 )

[node name="Bact3137" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 40.3975, 0, 18.3354 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "Bact"
}

[node name="190" type="MeshInstance" parent="Environment/Bact3137"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 5 )
mesh = SubResource( 6 )

[node name="191" type="CollisionShape" parent="Environment/Bact3137"]
shape = SubResource( 7 )

[node name="MO" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -36.1242, 0, 15.7516 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "MO"
}

[node name="11921" type="MeshInstance" parent="Environment/MO"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 13 )
mesh = SubResource( 14 )

[node name="11922" type="CollisionShape" parent="Environment/MO"]
shape = SubResource( 15 )

[node name="MO11923" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -36.0248, 0, -10.6832 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "MO"
}

[node name="11921" type="MeshInstance" parent="Environment/MO11923"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 13 )
mesh = SubResource( 14 )

[node name="11922" type="CollisionShape" parent="Environment/MO11923"]
shape = SubResource( 15 )

[node name="MO11924" type="RigidBody" parent="Environment"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 26.087, 0, -25.3913 )
gravity_scale = 0.0
contacts_reported = 1
contact_monitor = true
sleeping = true
linear_damp = 5.0
__meta__ = {
"Name": "MO"
}

[node name="11921" type="MeshInstance" parent="Environment/MO11924"]
transform = Transform( 1.3, 0, 0, 0, 1.3, 0, 0, 0, 1.3, 0, 0, 0 )
material_override = SubResource( 13 )
mesh = SubResource( 14 )

[node name="11922" type="CollisionShape" parent="Environment/MO11924"]
shape = SubResource( 15 )
